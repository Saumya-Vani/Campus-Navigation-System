# -*- coding: utf-8 -*-
"""DatasetGeneration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17VK3MuWGEoNBlD8KXexuYR9I_5Sxo2JK
"""

import pandas as pd

# List of campus buildings and places
building_names = [
    "Newman Building", "Global Lounge", "O'Brien Centre for Science", "Health Sciences Centre",
    "School of Computer Science", "UCD Village", "James Joyce Library", "Tierney Building",
    "Student Union", "Sports Centre", "Tennis Courts", "Church", "Agriculture and Food Science Centre",
    "Centre for English and Global Languages", "School of Arts and Humanities", "School of Geography",
    "Quinn School of Business", "Sutherland School of Law", "Geary Institute for Public Policy",
    "Humanities Institute", "Ashfield Residence", "Roebuck Castle", "Roebuck Hall Student Residence",
    "Village Halls", "Merville Residence", "Glenomena Residence", "UCD Bus Station",
    "St. Stephens Chaplaincy", "UCD Confucius Institute of Ireland",
    "School of Mechanical and Materials Engineering", "UCD Lake", "Hockey Stadium"
]

# Create DataFrame with IDs
df = pd.DataFrame({
    "id": range(1, len(building_names) + 1),
    "name": building_names
})

# Save to CSV
csv_path = 'buildings.csv'
df.to_csv(csv_path, index=False)

import os
import pandas as pd
import random

# Make sure your buildings.csv is in the same folder as this script / notebook
if not os.path.exists('buildings.csv'):
    raise FileNotFoundError("Please upload 'buildings.csv' into the working directory before running.")

def generate_paths(
    buildings_csv: str = "buildings.csv",
    paths_csv: str     = "paths.csv",
    extra_edge_factor: float = 1.0,
    min_distance: int  = 100,
    max_distance: int  = 1000,
    one_way_prob: float     = 0.2,
    accessible_prob: float  = 0.8,
    seed: int               = 42
):
    # 1) Read building IDs
    df = pd.read_csv(buildings_csv)
    ids = df['id'].tolist()
    random.seed(seed)

    # 2) Build a spanning tree (guarantees connectivity)
    edges = set()
    shuffled = ids.copy()
    random.shuffle(shuffled)
    for i in range(1, len(shuffled)):
        a, b = shuffled[i], random.choice(shuffled[:i])
        edges.add(tuple(sorted((a, b))))

    # 3) Add extra edges to increase density
    target_edge_count = len(edges) + int(len(ids) * extra_edge_factor)
    while len(edges) < target_edge_count:
        a, b = random.sample(ids, 2)
        edges.add(tuple(sorted((a, b))))

    # 4) Assign random weights & flags
    rows = []
    for a, b in edges:
        rows.append({
            'from_id':    a,
            'to_id':      b,
            'distance':   random.randint(min_distance, max_distance),
            'one_way':    random.random() < one_way_prob,
            'accessible': random.random() < accessible_prob
        })

    # 5) Write out paths.csv
    paths_df = pd.DataFrame(rows)
    paths_df.to_csv(paths_csv, index=False)
    print(f"✅ Generated {len(rows)} edges → saved to '{paths_csv}'")
    return paths_df

# Run it!
paths_df = generate_paths(
    buildings_csv="buildings.csv",
    paths_csv="paths.csv",
    extra_edge_factor=1.0,
    seed=123
)

# Quick sanity check
print(paths_df.head())
print("\nCurrent directory contents:", os.listdir())

import pandas as pd
import random
import os
from IPython.display import display

def generate_graph_dataset(num_nodes, extra_edge_factor=1.0,
                           min_dist=100, max_dist=1000,
                           one_way_prob=0.2, accessible_prob=0.8,
                           seed=42):
    random.seed(seed)

    # Generate node list
    node_ids = list(range(1, num_nodes + 1))
    buildings_df = pd.DataFrame({
        'id': node_ids,
        'name': [f'Node {i}' for i in node_ids]
    })
    buildings_csv = f'buildings_{num_nodes}.csv'
    buildings_df.to_csv(buildings_csv, index=False)

    # Build a spanning tree for connectivity
    edges = set()
    shuffled = node_ids.copy()
    random.shuffle(shuffled)
    for i in range(1, len(shuffled)):
        a = shuffled[i]
        b = random.choice(shuffled[:i])
        edges.add(tuple(sorted((a, b))))

    # Add extra random edges
    target_edges = len(edges) + int(num_nodes * extra_edge_factor)
    while len(edges) < target_edges:
        a, b = random.sample(node_ids, 2)
        edges.add(tuple(sorted((a, b))))

    # Create edge DataFrame
    rows = []
    for a, b in edges:
        rows.append({
            'from_id':    a,
            'to_id':      b,
            'distance':   random.randint(min_dist, max_dist),
            'one_way':    random.random() < one_way_prob,
            'accessible': random.random() < accessible_prob
        })
    paths_df = pd.DataFrame(rows)
    paths_csv = f'paths_{num_nodes}.csv'
    paths_df.to_csv(paths_csv, index=False)

    return buildings_df, paths_df

# Generate datasets in current working directory
bdf10k, pdf10k = generate_graph_dataset(10000, seed=101)
bdf100k, pdf100k = generate_graph_dataset(100000, seed=202)

# Display samples
print("Buildings 10k Sample:")
display(bdf10k.head())

print("Paths 10k Sample:")
display(pdf10k.head())

print("Buildings 100k Sample:")
display(bdf100k.head())

print("Paths 100k Sample:")
display(pdf100k.head())

# List generated files
generated_files = sorted([f for f in os.listdir() if f.startswith(('buildings_', 'paths_'))])
print("\nGenerated files in working directory:")
print(generated_files)